#!/usr/bin/env bash
set -euo pipefail
if [ "${DEBUG:-false}" != false ]; then set -x; fi


LOG_DIR=/tmp
CONF_FILE=${CONF_FILE:-~/.config/run-app/apps.conf}
PROFILE=${PROFILE:-dev}
declare -A APPS


loadConf() {
  if [ ! -f ${CONF_FILE} ]
  then
    createSampleAndDie
  fi
  . $CONF_FILE
}

createSampleAndDie() {
  mkdir -p $(dirname $CONF_FILE)
  createSample $CONF_FILE
  echo "I've created a template configuration for you here: $CONF_FILE"
  exit 1
}
createSample() {
local destination=${1:-/dev/stdout}
cat > $destination <<EOF
#
# Define any application environment variables
#
if [ -z "\${SPRING_PROFILES_ACTIVE:-}" ]
then
  export SPRING_PROFILES_ACTIVE=dev,fresnel
fi

#
# Define application using the syntax
# app <name> <fully qualified path to module directory>
#
app i /va/lighthouse-mock-mpi/mock-mpi
app c /va/lighthouse-charon/charon
app d /va/health-apis-data-query/data-query
app m /va/health-apis-mpi-fhir-query/mpi-fhir-query
app v /va/health-apis-vista-fhir-query/vista-fhir-query
app y /va/health-apis-yanartas/yanartas

EOF
}


app() {
  if [ $# != 2 ]
  then
    echo "Invalid app declaration: $@"
    echo "app <nickname> <directory>"
    exit 1
  fi
  local nickname=$1
  local dir=$2
  APPS[$nickname]=$dir
}

#============================================================
status() {
  cmd=statusFull
  while [ -n "${1:-}" ]
  do
    case "$1" in
      -b|--brief) cmd=statusBrief;;
      *) die "Unknown status option: $1";;
    esac
    shift
  done
  $cmd
}

statusBrief() {
  local pid
  local line=""
  local marker=
  for n in $(printf "%s\n" ${!APPS[@]} | sort -f)
  do
    pid=$(appPid $(appName $n))
    marker=$n
    if [ -z "${pid:-}" ]; then marker=-; fi
    if [ -z "${line:-}" ]; then line=$marker; else line+="$marker"; fi
  done
  if [ -n "${line:-}" ]; then echo "$line" ; fi
}

statusFull() {
  for n in ${!APPS[@]}
  do
    statusOf $n
  done | sort -f
}

statusOf() {
  local n=$1
  local app pid debugPort dir branch
  app=$(appName $n)
  pid=$(appPid $app)
  debugPort=$(appDebugPort $app)
  dir=${APPS[$n]}
  cd $dir
  branch=$(git branch --show-current)
  printf "%s %-25s %5s %4s %s\n" $n "$app" "${pid:--}" "${debugPort:--}" "$branch"
}

#============================================================

names() {
  local dir app
  for n in ${!APPS[@]}
  do
    dir=${APPS[$n]}
    app=$(appName $n)
    printf "%-3s %-20s %s\n" $n $app $dir
  done | sort -f
}


#============================================================

start() {
  if [ $# -eq 0 ]; then usage "No application specified"; fi
  local apps=()
  local buildMode=none
  local remoteDebug=false
  local remoteDebugPort=8000
  while [ -n "${1:-}" ]
  do
    case $1 in
      -r|--rebuild) buildMode=full;;
      -b|--build) buildMode=quick;;
      -d|--debug) remoteDebug=true;;
      --debug-port) shift; remoteDebugPort=$1;;
      *) apps+=($1);;
    esac
    shift
  done

  local enableRemoteDebugginOnPort
  if [ ${remoteDebug} == true ]
  then
    enableRemoteDebugginOnPort=${remoteDebugPort}
  fi
  for n in ${apps[@]}; do startApp $buildMode "${enableRemoteDebugginOnPort:-}" $n; done
}

startApp() {
  local buildMode=$1
  local enableRemoteDebugginOnPort="${2:-}"
  local n=$3
  configureAppInCurrentDirectory $n
  local dir
  dir=${APPS[$n]:-}
  if [ -z "$dir" ]; then die "Cannot start unknown application: $n"; fi
  cd $dir
  local jar app
  app=$(appName $n)
  buildApp $buildMode $app $dir
  if ! jar=$(find $dir/target/ -maxdepth 1 -name "$app-*.jar" \
    -not -name "*-tests.jar" -not -name "*-library.jar" 2> /dev/null)
  then
    die "Application jar not found"
  fi
  if [ -z "${jar:-}" ]; then die "Application jar not found"; fi

  local pid=$(appPid $app)
  if [ -n "${pid:-}" ]; then echo "$app appears to be running"; return; fi

  local logFile=$LOG_DIR/$app.log
  echo "Starting $app ($logFile)"
  date > $logFile
  if [ -f .run-app ]
  then
    export RUN_APP_NAME=$app
    export RUN_APP_JAR=$jar
    export RUN_APP_ENABLE_REMOTE_DEBUGGING_PORT=${enableRemoteDebugginOnPort:-}
    chmod +x .run-app
    ./.run-app &>> $logFile &
    return
  fi
  local options="-Dapp.name=$app"
  if [ -n "${enableRemoteDebugginOnPort:-}" ]
  then
    options+=" -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:${enableRemoteDebugginOnPort}"
  fi
  java ${options} -jar "$jar" &>> $logFile &
}



buildApp() {
  local mode=$1
  local app=$2
  local dir=$3
  case $mode in
    quick) buildQuick $app $dir;;
    full) buildFull $app $dir;;
  esac
}

buildQuick() {
  local app=$1 dir=$2 branch
  cd $dir
  branch=$(git branch --show-current)
  echo "Rebuilding $app on $branch (non-standard, not cleaning, no tests)"
  find target -maxdepth 1 -name "$app-*.jar" -exec rm {} \;
  local buildLog=$(mktemp)
  trap "rm $buildLog" EXIT
  echo -n "Maven "
  if ! mvn package -P'!standard' -DskipTests -Dmaven.gitcommitid.skip=true \
    | tee $buildLog \
    | awk -W interactive '/\[INFO\] --- .*/ { printf "." }'
  then
    echo " Aborting"
    echo "Try running with --rebuild instead of --build"
    cat $buildLog
    exit 1
  fi
  echo " Done"
}

buildFull() {
  local app=$1 dir=$2 branch master
  cd $dir
  branch=$(git branch --show-current)
  master=$(git remote show origin | grep 'HEAD branch:' | sed 's/.*: //')
  echo "Rebuilding repository for $app on $branch (non-standard, no tests)"
  if [ "$branch" == "$master" ]
  then
    echo "Refreshing repository"
    git pull
  fi
  local where=.
  if [ -f ../pom.xml ]; then where=".."; fi
  mvn clean install -f $where -P'!standard' -DskipTests -Dmaven.gitcommitid.skip=true
  if [ $? != 0 ]; then echo "Aborting" ; exit 1; fi
}

#============================================================

stop() {
  if [ $# -eq 0 ]; then usage "No application specified"; fi
  # stop has no option but for simplicity may be passed start options
  # during a restart... ignore anything starting with a -
  for n in $@; do if [[ "$n" == -* ]]; then continue; fi; stopApp $n; done
}

stopApp() {
  local n=$1
  local app pid
  app=$(appName $n)
  pid=$(appPid $app)
  if [ -z "${pid:-}" ]
  then
    echo "$app does not appear to be running"
    return
  fi
  echo "Stopping $app ($pid)"
  for i in {1..5}
  do
    kill $pid
    sleep 0.250s
    pid=$(appPid $app)
    if [ -z "${pid:-}" ]; then return; fi
  done
  echo "Killing $app ($pid)"
  kill -9 $pid
}

#============================================================

log() {
  local follow=false
  local n
  while [ -n "${1:-}" ]
  do
    case "$1" in
      -f|--follow) follow=true;;
      -*) usage "Unknown option to log: $1";;
      *) n=$1;;
    esac
    shift
  done
  if [ -z "${n:-}" ]; then die "Application not specified"; fi
  local app
  app=$(appName $n)
  if [ $follow == true ]
  then
    tail -F $LOG_DIR/$app.log
  else
    cat $LOG_DIR/$app.log
  fi
}

#============================================================

normalizeArguments() {
  local normalized=()
  local maybe
  for arg in $@
  do
    # An option, e.g. --build
    if [[ "$arg" == -* ]]; then normalized+=( $arg ); continue; fi
    # A normal application ID, e.g. v
    if [ -n "${APPS[$arg]:-}" ]; then normalized+=( $arg ); continue; fi
    # A complete application name, e.g. vista-fhir-query
    maybe=$(findIdByName $arg)
    if [ -n "${maybe:-}" ]; then normalized+=( $maybe ); continue; fi
    # Multiple applications specified together, e.g. vcy
    maybe=$(findIdsFromSingleWord $arg)
    if [ -n "${maybe:-}" ]; then normalized+=( $maybe ); continue; fi
    if configureAppInCurrentDirectory $arg; then normalized+=( $arg ); continue; fi
  done
  echo "${normalized[@]}"
}

findIdByName() {
  local name="${1:-}"
  if [ -z "${name:-}" ]; then return; fi
  for n in ${!APPS[@]}
  do
    if [ "$(appName $n)" == $name ]; then echo $n; return; fi
  done
  if configureAppInCurrentDirectory $name
  then
    echo $name
  fi
}

configureAppInCurrentDirectory() {
  local name=$1
  if [ -n "${APPS[$name]:-}" ]; then return 0; fi
  local jar
  if jar=$(find ./target/ -maxdepth 1 -name "$name-*.jar" \
    -not -name "*-tests.jar" -not -name "*-library.jar" 2> /dev/null)
  then
    APPS[$name]=$(pwd)
    return 0
  fi
  return 1
}

findIdsFromSingleWord() {
  local word="${1:-}"
  local normalized=()
  for (( i=0; i < ${#word}; i++))
  do
    id=${word:$i:1}
    # At least one letter is not an application
    if [ -z "${APPS[$id]:-}" ]; then return; fi
    normalized+=( $id )
  done
  echo "${normalized[@]}"
}

#============================================================


appName() {
  local n=$1
  configureAppInCurrentDirectory $n
  local dir=${APPS[$n]:-}
  if [ -z "${dir}" ]; then die "Unknown application: $n"; fi
  local name
  name=$(basename $dir|sed 's/^\(health-apis\|lighthouse\)-//')
  echo $name
}

appPid() {
  local app=$1
  ps -C java -o pid,args \
    | grep -E -- "-Dapp\.name=$app( |\$)" \
    | awk '{print $1}' \
    || true
}

appDebugPort() {
  local app=$1
  ps -C java -o pid,args \
    | grep -E -- "-Dapp\.name=$app( |\$)-agentlib:jdwp" \
    | sed 's/.*address=.:\([0-9]\+\).*/\1/' \
    || true
}

#============================================================
usage() {
a=$(basename $0)
cat<<EOF
$0 <command> [arguments]

Manage Java applications.
Applications are defined by the $a configuration file:
$CONF_FILE

COMMANDS
help
  Print this help and exit.
help-config
  Print a documented configuration sample.

start [-b|-r] name [name ...]
  Start one or more applications.
  -b, --build    Build just the application.
  -r, --rebuild  Rebuild repository directory, pulling if on primary branch.
  -d, --debug    Enable remote debugging.
      --debug-port <number>
                 Use remote debugging port. Default 8000.
  alias: s
stop name [name ...]
  Stop one or more applications.
  alias: k, kill
restart [start options] name [name ...]
  Stop then start one or more applications.
  alias: r
log [-f] name
  Print the logs of an application.
  -f, --follow   Follow the logs
  alias: l

status [-b]
  Print the status of applcations
  -b, --brief    Print a brief summary of running app names only.
  alias: st
names
  Print the names, application, and directory of all known applications
edit
  Edit the run-app configurations

APPLICATION NAMES
Commands that accept application names may use
- the long application name (e.g., vista-fhir-query)
- the abbreviation (e.g., v)
- multiple abbreviations specified as one arguments (e.g., vcy)
- an application in the current directory

CUSTOMIZED APPLICATION START
If the file .run-app is present in the application directory, it will be
used instead of a simple 'java -jar' command to launch the application.

- The application directory will be the current working directory
- environment variables will be set
  - RUN_APP_JAR = path to application jar
  - RUN_APP_NAME = the application name
- Application must be launched with the application name using the system
  property 'app.name'. For example,
  \$ java -Dapp.name=\$RUN_APP_NAME -jar \$RUN_APP_JAR --some-option=foo

EOF
die "${1:-}"
}

die() {
  echo "${1-}" >&2
  exit 1
}

main() {
  loadConf
  if [ $# -eq 0 ]; then usage "No command specified"; fi
  local command=$1
  shift
  args=$(normalizeArguments $@)
  case $command in
    -h*|--h*|help) usage;;
    help-config) createSample;;
    s|start) start $args;;
    k|kill|stop) stop $args;;
    r|restart) stop $args; start $args;;
    st|status) status $args;;
    l|log|logs) log $args;;
    names) names;;
    edit) ${EDITOR:-vi} ${CONF_FILE};;
    *) usage "Unknown command: $command"
  esac
}


main $@
