#!/usr/bin/env bash
set -euo pipefail
if [ "${DEBUG:-false}" != false ]; then set -x; fi

APP_NAME=$(basename $(readlink -f $0))
CONF_FILE=${CONF_FILE:-~/.config/$APP_NAME/$APP_NAME.conf}
ENVIRONMENTS=( qa staging production staging_lab lab )
CACHE_DIR=${CACHE_DIR:-~/.config/$APP_NAME/cache}
CACHE_EXPIRATION=${CACHE_EXPIRATION:-300}
CACHE_EXPIRATION_TIME=$(( $(date +%s) - $CACHE_EXPIRATION ))
mkdir -p $CACHE_DIR

#============================================================
usage() {
cat<<EOF
$0 <command> [arguments]

Print details about deployments.

$APP_NAME configuration file: $CONF_FILE

COMMANDS
help
  Print this help and exit.
help-config
  Print a documented configuration sample.

list [-p|-s] [--no-update]
  Print deployment status.
  Format is one line with the following fields:
    application
    environment
    application-version
    deployment-version
    day
    time
    test-status
    update-status
  -p, --problems  Print problems only.
  -s, --summary   Print a summary of applications withs problems.
  --no-update     Do not update, use previously cached metadata.
  alias: l,ls,,p,print

prompt
  Print a very fast and short summary suitable for a prompt.

EOF
die "${1:-}"
}

die() {
  echo "${1-}"
  exit 1
}

main() {
  if [ $# -eq 0 ]
  then
    # deployment-status
    command=list
  elif [ $1 == -h -o $1 == --help ]
  then
    usage
  elif [[ $1 == -* ]]
  then
    # deployment-status --problems
    command=list
  else
    # deployment-status <command> [options]
    command=$1; shift
  fi
  case $command in
    -h*|--h*|help) usage;;
    help-config) createSample;;
    p|print|l|ls|list) printStatus $@;;
    prompt) printPrompt;;
    *) usage "Unknown command: $command"
  esac
}


#============================================================

loadConf() {
  if [ ! -f ${CONF_FILE} ]
  then
    createSampleAndDie
  fi
  . $CONF_FILE
}

createSampleAndDie() {
  mkdir -p $(dirname $CONF_FILE)
  createSample $CONF_FILE
  echo "I've created a template configuration for you here: $CONF_FILE"
  exit 1
}

createSample() {
local destination=${1:-/dev/stdout}
cat > $destination <<EOF
#
# $APP_NAME Configuration
#
APPS=(
  charon
  data-query
  patient-gen-data
  mock-mpi
  mpi-fhir-query
  cerner-fhir-query
  vista-fhir-query
  yanartas
)
EOF
}



#============================================================
refreshMetadata() {
  for env in ${ENVIRONMENTS[@]}
  do
    refreshMetadataInEnvironment $env &
  done
  wait
}

k8sMetadataFile() {
  local env=$1
  echo $CACHE_DIR/$env/status.k8s
}

ecsMetadataFile() {
  local env=$1
  echo $CACHE_DIR/$env/status.ecs
}

refreshMetadataInEnvironment() {
  local env=$1
  local artifactUrl="https://tools.health.dev-developer.va.gov/jenkins/job/department-of-veterans-affairs/job/health-apis-deployer/job/${env}/lastSuccessfulBuild/artifact/"
  refreshMetadataFile "$artifactUrl/status.us-gov-west-1a.json" $(k8sMetadataFile $env) &
  refreshMetadataFile "$artifactUrl/status.ecs.json" $(ecsMetadataFile $env) &
  wait
}

isMetadataFileUsable() {
  local file=${1}
  if [ ! -f $file ]; then return 1; fi
  local age=$(stat -c %Y $file)
  if [ $age -lt $CACHE_EXPIRATION_TIME ]; then return 1; fi
  return 0
}

refreshMetadataFile() {
  local url=${1}
  local file=${2}
  if isMetadataFileUsable $file; then return; fi
  local dir=$(dirname $file)
  if [ ! -d "$dir" ]; then mkdir -p $dir; fi
  ensureJenkinsCredentials
  curl -u "${JENKINS_USERNAME_PASSWORD}" -ksfL "$url" \
    | jq -r '.[] | [ .["deployment-unit"], .["deployment-app-version"], .["deployment-unit-version"], .["deployment-test-status"], .["deployment-date"] ] | join(" ")' \
    > $file
}

ensureJenkinsCredentials() {
  if [ -n "${JENKINS_USERNAME_PASSWORD:-}" ]; then return; fi
  if [ -n "${JENKINS_USERNAME:-}" -a -n "${JENKINS_PASSWORD:-}" ]
  then
    JENKINS_USERNAME_PASSWORD="${JENKINS_USERNAME}:${JENKINS_PASSWORD}"
    return
  fi
  usage "Jenkins credentials are not set"
}

#============================================================

printPrompt() {
  local promptFile=$CACHE_DIR/prompt
  if [ -f $promptFile ]; then cat $promptFile; fi
  $0 print --prompt > $promptFile &
  disown
}

printStatus() {
  local filter='none'
  while [ -n "${1:-}" ]
  do
    case "$1" in
      -p|--problems) filter='problems';;
      -s|--summary) filter='summary';;
      --prompt) filter='prompt';;
      --no-update) CACHE_EXPIRATION_TIME=0;;
      *) usage "Unknown option to print: $1";;
    esac
    shift
  done
  loadConf
  refreshMetadata
  local status
  local behind=()
  local failed=()
  for app in $(printf "%s\n" ${APPS[@]} | sort)
  do
    status=$(printStatusForApp $app)
    case $filter in
      problems) echo "$status" | grep -iE '(FAILED|behind)' || true;;
      summary|prompt)
        local line
        line=$(echo "$status" | oneLine FAILED || true)
        if [ -n "${line:-}" ]; then failed+=( $line ); fi
        line=$(echo "$status" | oneLine behind || true)
        if [ -n "${line:-}" ]; then behind+=( $line ); fi
        ;;
      *) echo "$status";;
    esac
  done
  if [ $filter == summary ]
  then
    if [ ${#failed[@]} -ne 0 ]; then echo "Failed: ${failed[@]}"; fi
    if [ ${#behind[@]} -ne 0 ]; then echo "Behind: ${behind[@]}"; fi
  fi
  if [ $filter == prompt ]
  then
    local message
    if [ ${#failed[@]} -ne 0 ]; then message+="${#failed[@]} failed"; fi
    if [ ${#behind[@]} -ne 0 ]; then message+="${message:+, }${#behind[@]} behind"; fi
    echo "${message:-ok}"
  fi
}

oneLine() {
  local key=$1
  local output=
  output=$(grep -i $key \
    | awk '{ print $1 }' \
    | sed -e 's/\b\([a-z]\)\([a-z]\+\)/\1/g' -e 's/-//g' \
    | sort -u \
    | paste -sd .)
  if [ -n "${output:-}" ]; then echo -n "$output "; fi
}

printStatusForApp() {
  local app=$1
  local envStatus
  declare -A appVersion
  declare -A duVersion
  declare -A testStatus
  declare -A date
  declare -A previousEnv
  previousEnv[qa]=qa
  previousEnv[staging]=qa
  previousEnv[production]=staging
  previousEnv[staging_lab]=qa
  previousEnv[lab]=staging_lab
  for env in ${ENVIRONMENTS[@]}
  do
    envStatus=( $(appStatusInEnvironment $env $app) )
    # vista-fhir-query 2.0.188 0.0.581 PASSED 2022-06-09T1123-0400
    appVersion[$env]=${envStatus[1]:-na}
    duVersion[$env]=${envStatus[2]:-na}
    testStatus[$env]=${envStatus[3]:-unknown}
    date[$env]=$(normalizeDate ${envStatus[4]:-})
  done

  local previous
  local behind
  for env in ${ENVIRONMENTS[@]}
  do
    previous=${previousEnv[$env]}
    if [ ${appVersion[$env]} == na ]; then continue; fi
    behind=up-to-date
    if [ "${duVersion[$env]}" != "${duVersion[$previous]}" ]; then behind=behind; fi
    printf "%-22s  %-11s  %-7s  %-8s  %-16s  %s  %s\n" \
      $app \
      $env \
      ${appVersion[$env]} \
      ${duVersion[$env]} \
      "${date[$env]}" \
      ${testStatus[$env],,} \
      $behind
  done
}

normalizeDate() {
  local date=${1:-}
  if [ -z "${date:-}" ]; then echo "unknown"; return; fi
  date -d "$(echo $date | sed 's/./&:/13')" +"%Y-%m-%d %I:%M"
}

appStatusInEnvironment() {
  local env=$1
  local app=$2
  if grep $app $(ecsMetadataFile $env); then return; fi
  if grep $app $(k8sMetadataFile $env); then return; fi
}



main $@
