#!/usr/bin/env bash
set -euo pipefail
if [ "${DEBUG:-false}" != false ]; then set -x; fi

#
# disable glob expansion to prevent accidentally finding files that
# match during pattern processing
#
set -f

APP_NAME=$(basename $(readlink -f $0))
SDB=${SDB:-~/.config/$APP_NAME/$APP_NAME.db}


#============================================================
usage() {
cat<<EOF
$0 <command> [arguments]

Manage secrets as key/value pairs.

Password can specified as
- standard input,
  echo opensesame | $APP_NAME print foo.bar
- the environment variable 'SPW',
  SPW=opensesame $APP_NAME print foo.bar
- or not at all and $APP_NAME will prompt you

$APP_NAME encrypted database file: $SDB
Database can be specified using environment variable 'SDB'
SDB=shanktopus.db secrets print team.mascot

COMMANDS
help
  Print this help and exit.

edit
  Edit the database using ${EDITOR:-vi}.
  Change editor using environment variable EDITOR.

cat
  Print the contents to database.
  alias: c

entry <pattern> [pattern ...]
  Print the values of secrets matching the patterns as property file entries.
  For example, secret "foo.bar" will print "foo.bar=super secret"
  alias: entries

env <pattern> [pattern ...]
  Print the values of secrets matching the patterns as env variables.
  For example, secret "foo.bar" will print "export FOO_BAR='super secret'"
  alias: e

keys <pattern> [pattern ...]
  Print the keys of secrets matching the patterns
  alias: p, value, values, v

[print] <pattern> [pattern ...]
  Print the values of secrets matching the patterns.
  This can be executed with just patterns. The following commands are equal:
    $APP_NAME print foo.bar
    $APP_NAME foo.bar
  alias: p, value, values, v


EXAMPLES
$APP_NAME dockerhub.password | docker login --password-stdin --username mr-shanky

# Use a subshell to prevent secrets from lingering in the environment
(
  eval \$($APP_NAME env sandbox.*)
  curl -H"Authorization: Bearer \$SANDBOX_TOKEN" \\
    https://sanbox-api.va.gov/services/fhir/v0/r4/Patient/\$SANDBOX_TEST_PATIENT
)

EOF
die "${1:-}"
}

die() {
  echo "${1-}"
  exit 1
}

main() {
  if [ $# -eq 0 ]; then usage "No arguments specified"; fi
  local command=$1
  shift
  case $command in
    -h*|--h*|help) usage;;
    edit) edit;;
    c|cat) decrypt;;
    p|print|v|value|values) printSecrets value $@;;
    e|env) printSecrets env $@;;
    key|keys) printSecrets key $@;;
    entry|entries)  printSecrets entry $@;;
    *) printSecrets value $command $@;;
  esac
}

#============================================================
setPassword() {
  if [ "${SPW:-}" == "-" ]; then read SPW; fi
  if [ -n "${SPW:-}" ]; then return; fi
  read -s -p "Password: " SPW
}

decrypt() {
  if [ ! -f $SDB ]; then return; fi
  setPassword
  # On FIPS enabled servers, this loves to spam the console with this
  # message about not using the out-of-core memory allocation handler
  if ! gpg -q --batch --pinentry-mode loopback --passphrase "$SPW" -d $SDB \
    2> >(grep -v 'out of core handler')
  then
    echo "Failed to decrypt $SDB"
    exit 1
  fi
}

encrypt() {
  local file=$1
  setPassword
  gpg -q --batch --pinentry-mode loopback --passphrase "$SPW" -c $file \
    2> >(grep -v 'out of core handler')
  mkdir -p $(dirname $SDB)
  mv $file.gpg $SDB
}

#============================================================

edit() {
  local tmpDir=$(mktemp -p /dev/shm -d .XXXXX)
  trap "rm -rf $tmpDir" EXIT
  local tmp="$tmpDir/db"
  touch $tmp
  chmod 600 $tmp
  decrypt >> "$tmp"
  ${EDITOR:-vi} "$tmp"
  encrypt "$tmp"
}


#============================================================
toEnvName() {
  local key="$1"
  key="${key^^}"
  key="${key//./_}"
  key="${key//-/_}"
  echo "$key"
}

printKeyAndValue() {
  local style=$1
  local key="$2"
  local value="$3"
  case $style in
    entry) echo "$key=$value";;
    key) echo "$key";;
    env) echo "export $(toEnvName $key)='$value'";;
    value) echo "$value";;
  esac
}


printSecrets() {
  local style=$1 ; shift
  local patterns=$@
  setPassword
  local key value
  while IFS= read -r line
  do
    if ! [[ "$line" =~ ^([-_.a-zA-Z0-9]+)=(.*) ]]; then continue; fi
    key="${BASH_REMATCH[1]}"
    value="${BASH_REMATCH[2]}"
    for pattern in $patterns
    do
      if [[ "$key" == $pattern ]]
      then
        printKeyAndValue "$style" "$key" "$value"
      fi
    done
  done < <(decrypt | sort)

}

#============================================================

main $@
