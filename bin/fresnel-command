#!/usr/bin/env bash
set -euo pipefail

APP_NAME=$(basename $(readlink -f $0))

usage() {
cat<<EOF
$0 [-] <command> [args ...]

Issue a Fresnel Commander request.

This is an internal commmand proxy that allows execution of a selective
 set of commands on the host.

If '-' is specified as the first argument, stdin will be captured and
sent to the host command.

${1:-}

EOF
exit 1;
}


if [ -z "${1:-}" ]; then usage "No command specified"; fi
if [ "${1}" == -h -o "${1}" == --help -o "${1}" == help ]; then usage; fi
if [ "${1}" == - -a $# -eq 1 ]; then usage "No command specified"; fi

REQUEST_DIR=/var/run/fresnel
REQUEST_FILE=$REQUEST_DIR/requests
REQUEST_ID=$(date +%s).$RANDOM
COMMAND=$REQUEST_DIR/$REQUEST_ID.cmd
IN=$REQUEST_DIR/$REQUEST_ID.in
OUT=$REQUEST_DIR/$REQUEST_ID.out
ERR=$REQUEST_DIR/$REQUEST_ID.err
STATUS=$REQUEST_DIR/$REQUEST_ID.status

KILL_ME=()
onExit() {
  EXIT=$?
  rm $COMMAND $IN $OUT $ERR $STATUS > /dev/null 2>&1 &
  kill ${KILL_ME[@]}
  exit $EXIT
}
trap onExit EXIT

touch $OUT
touch $ERR
touch $STATUS

tail --pid $BASHPID -s 0.1 -f $OUT &
KILL_ME+=( $! )
tail --pid $BASHPID -s 0.1 -f $ERR >&2 &
KILL_ME+=( $! )

if [ "${1:-}" == - ]
then
  shift
  cat > $IN
fi

echo $@ > $COMMAND

waitForStatus() {
  while read line
  do
    exit "${line:-44}"
  done < <(tail --pid $BASHPID -s 0.1 -f $STATUS)
}

waitForStatus &
WAIT_FOR_IT=$!
echo $REQUEST_ID >> $REQUEST_FILE

( sleep ${FRESNEL_COMMAND_TIMEOUT:-10} ; echo "timeout $@" >&2 ; kill $WAIT_FOR_IT ) &
KILL_ME+=( $! )

wait $WAIT_FOR_IT
EXIT=$?
