#!/usr/bin/env bash
set -euo pipefail
if [ "${DEBUG:-false}" != false ]; then set -x; fi
cd $(dirname $0)
. fresnel.env

export PATH=$PATH:$FRESNEL_HOME/host-bin


determineTimezone() {
  # Guess which timezone
  if [ "${FRESNEL_TIMEZONE:-automatic}" == automatic ]
  then
    local target=$(/usr/bin/readlink /etc/localtime)
    if [ -n "${target:-}" ]
    then
      export FRESNEL_TIMEZONE=$(echo $target | cut -d "'" -f 4 | sed 's/.*zoneinfo\///')
    fi
  fi
}


doSomethingWithX11() {
  if /usr/bin/which xhost > /dev/null 2>&1
  then
    if ! ps -fu $USER | grep -F X11.bin | grep -q -v grep
    then
      if [ -z "${FRESNEL_AUTO_START_X:-}" ]
      then
        read -p "XQuartz is available but not running? Start it? [Y/n] " FRESNEL_AUTO_START_X
      fi
      FRESNEL_AUTO_START_X="${FRESNEL_AUTO_START_X:-y}"
      if [ "${FRESNEL_AUTO_START_X}" == "y" -o "${FRESNEL_AUTO_START_X}" == "Y" ]
      then
        echo "Starting XQuartz and enabling access from the localhost."
        # Running xhost will automatically start the server.
        xhost + 127.0.0.1
      else
        echo "X11 tools will be installed, but not usable until relaunched with XQuartz running."
      fi
    fi
    export INSTALL_X_TOOLS=true
  else
    echo "X11 not detected. Install XQuartz to gain access to X11 tools."
  fi
}


startFresnelCommander() {
  nohup fbin/fresnel-commander & 
  # > $FRESNEL_EXCHANGE_DIR/commander.log 2>&1 &
}

generateSshKeys() {
  #
  # Generate dev keys unless they already exist
  #
  local key=$HOME/.ssh/id_dev_fresnel_rsa
  if [ ! -f $key ]
  then
    echo "generating $key"
    ssh-keygen -t rsa -N "" $key
  fi
  #
  # Add the newly generated public key to 'dev' users authorized keys in what will ultimately be 
  # inside of fresnel's ~dev/.ssh/authorized_keys. This is equivalent to running:
  # ssh-copy-id -i $HOME/.ssh/id_dev_fresnel_rsa.pub -f -p 2222 dev@localhost
  #
  local realDevHome=$HOME/.fresnel/home
  local authorizedKeys=$realDevHome/.ssh/authorized_keys
  if [ ! -d $(dirname $authorizedKeys) ]; then mkdir -p $(dirname $authorizedKeys); fi
  ( cat $key ; cat $authorizedKeys ) | sort -u > $authorizedKeys.tmp
  cp $authorizedKeys.tmp $authorizedKeys
  #
  # Make sure ssh won't complain about the new fresnel generated host keys
  #
  if [ -f $HOME/.ssh/known_hosts ]
  then
    echo "Cleaning up your previous fresnel known host keys"
    sed -i -e '/\[localhost\]:2222/d' "$HOME/.ssh/known_hosts"
  fi
}

updateSshConfig() {
  local sshConfig=$HOME/.ssh/config
  if [ ! -f $sshConfig ]; then touch $sshConfig; fi
sed -i -e '/fresnel-autoconfig-start/,/fresnel-autoconfig-end/d' $sshConfig
cat >> $sshConfig <<EOF
# fresnel-autoconfig-start
# Content between markers is automatically managed by Fresnel
Host fresnel f
  Hostname localhost  
  Port 2222
  User dev
  IdentityFile ~/.ssh/id_dev_fresnel_rsa
# fresnel-autoconfig-end 
EOF
  echo "You can ssh into Fresnel using:"
  echo "ssh fresnel"
}

#
# ssh support is expiremental and requires additional logic in the Dockerfile to be enabled 
#
#generateSshKeys
#updateSshConfig
#
determineTimezone
doSomethingWithX11
startFresnelCommander
docker compose build $@
docker compose up --detach --force-recreate

